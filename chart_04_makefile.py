# create SRC/chart-04.makefile
import pdb

from directory import directory


def create(control):
    '''Write makefile to source directory.'''

    def recipe(command, options):
        result = command
        i = 0
        while (i < len(options)):
            result += ' ' + options[i]
            i += 1

        return result

    def rule(target, prerequisites, recipes):
        line = target + ':'
        for prerequesite in prerequisites:
            line += ' ' + prerequesite

        # append recipes, preceeding each with a tab character
        lines = [line]
        for recipe in recipes:
            lines.append('\t' + recipe)

        if True:
            for line in lines:
                print line

        return lines

    def make_lines():
        '''Produce lines for makefile.

        # makefile generate by command python PGM makefile"
        <cv-cell>: cv-cell.py <training-data>
            $(PYTHON) cv-cell.py <cv-cell-name>
        chart-04.SPECIFIC.txt: chart-04.data chart-04.py
            $(PYTHON) chart-04.py txt SPECIFIC
        chart-04.data: $(chart-04-cells) chart-04.py
            $(PYTHON) chart-04.py data
        #chart-04.makefile: chart04.py
            $(PYTHON) chart-04.py makefile
        '''

        lines = []
        start_python = '$(PYTHON)'

        # comment: how file was generated
        lines.append('# makefile generated by python %s makefile' %
                     control.me)

        # rule to build the makefile itself
        makefile = control.base_name + '.makefile'
        program = control.base_name + '.py'
        create_makefile = recipe(start_python,
                                 [program, 'makefile'])
        lines.extend(rule(makefile, [program], [create_makefile]))

        # rule to build the cross-validation cell
        the_cell = directory('cells') + control.cvcell_id + '.cvcell'
        training_data = directory('working') + control.training_data
        create_cell = recipe(start_python,
                             ['cv-cell.py', control.cvcell_id])
        # don't rebuilt the cell if this source code file changes
        lines.extend(rule(the_cell, [training_data], [create_cell]))

        # rule to build the data file
        the_data = directory('working') + control.base_name + '.data'
        create_data = recipe(start_python,
                             [program, 'data'])
        lines.extend(rule(the_data, [the_cell], [create_data]))

        # rule to build the txt files
        for txt_choice in control.txt_choices:
            path_to_txt_file = \
                directory('working') + \
                control.base_name + \
                '.' + txt_choice +\
                '.txt'
            create_txt = recipe(start_python,
                                [program, 'txt', txt_choice])
            lines.extend(rule(path_to_txt_file,
                              [program, the_data],
                              [create_txt]))

        # phony targets (for development)
        phony_data = 'chart-04.data'
        lines.extend(rule('.PHONY', [phony_data], []))
        lines.extend(rule(phony_data, [the_data], []))

        return lines

    lines = make_lines()
    if True:
        print 'makefile'
        for line in lines:
            print line

    path = control.base_name + '.makefile'
    f = open(path, 'w')
    for line in lines:
        f.write(line)
        f.write('\n')
    f.close()


if __name__ == '__main__':
    if False:
        pdb.set_trace()
