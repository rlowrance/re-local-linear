# create SRC/chart-04.makefile
import pdb

from directory import directory


def create(control):
    '''Write makefile to source directory.'''

    def recipe(command, options):
        result = command
        i = 0
        while (i < len(options)):
            result += ' ' + options[i]
            i += 1

        return result

    def rule(target, prerequisites, recipes):
        line = target + ':'
        for prerequesite in prerequisites:
            line += ' ' + prerequesite

        # append recipes, preceeding each with a tab character
        lines = [line]
        for recipe in recipes:
            lines.append('\t' + recipe)

        if True:
            for line in lines:
                print line

        return lines

    def rule1(target, prerequisites, one_recipe):
        return rule(target, prerequisites, [one_recipe])

    def make_lines():
        '''Produce lines for makefile.

        # makefile generate by command python PGM makefile"
        chart-04-makefile: chart-04.py chart_04_makefile.py
            $(PYTHON) chart-04.py makefile
        WORKING/<cell>: <training data>
            $(PYTHON) cv-cell.py <cell>
        chart-04-data: chart-04.py chart_04_data.py <training data>
            $(PYTHON) chart-04.py data
        # have a rule just for the first file, though all are created
        chart-04.nz-count-all-periods.txt: chart-04.py chart_04_txt.py <cells>
            $(PYTHON) chart-04.py txt

        '''

        lines = []
        start_python = '$(PYTHON)'

        def chart_import(module):
            return 'chart_04_' + module + '.py'

        def chart_recipe(what_file):
            return recipe(start_python, ['chart-04.py', what_file])

        # comment: how file was generated
        lines.append('# makefile generated by: python %s makefile' %
                     control.me)

        # rule to build the makefile itself
        makefile = control.base_name + '.makefile'
        prereqs = (control.base_name + '.py',
                   chart_import('makefile'))
        lines.extend(rule1(makefile,
                           prereqs,
                           chart_recipe('makefile')))

        # rule to build the cross-validation cell
        cell_path = directory('working') + control.cvcell_id + '.cvcell'
        training_data = directory('working') + control.training_data
        # don't rebuilt the cell if this source code file changes
        lines.extend(rule1(cell_path,
                           [training_data],
                           recipe(start_python,
                                  ['cv-cell.py', control.cvcell_id])))

        # rule to build the data file
        the_data = directory('working') + control.base_name + '.data'
        prereqs = [control.base_name + '.py',
                   chart_import('data'),
                   cell_path]
        lines.extend(rule1(the_data,
                           prereqs,
                           chart_recipe('data')))

        # rule to build the txt files
        # one invocation builds them all
        # create a rule just for one of the possible targest
        one_target = control.base_name + '.nz-count-all-periods.txt'
        prereqs = [control.base_name + '.py',
                   chart_import('txt'),
                   the_data]
        lines.extend(rule1(directory('working') + one_target,
                           prereqs,
                           chart_recipe('txt')))

        # phony targets (for development)
        phony_data = 'chart-04.data'
        lines.extend(rule('.PHONY', [phony_data], []))
        lines.extend(rule(phony_data, [the_data], []))

        return lines

    lines = make_lines()
    if True:
        print 'makefile'
        for line in lines:
            print line

    path = control.base_name + '.makefile'
    f = open(path, 'w')
    for line in lines:
        f.write(line)
        f.write('\n')
    f.close()


if __name__ == '__main__':
    if False:
        pdb.set_trace()
