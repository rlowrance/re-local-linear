'create ege_week.makefile'
import datetime
import pdb
from pprint import pprint
import random

# choose parameters
test = False
use_month = True  # next period is 1 month
random.seed(123)


lines = []
lines.append('# generated by running ege_week_makefile.py at ' + str(datetime.datetime.now()))


def make_lines(date, model, training_days, hp, system):
    verbose = False
    if verbose:
        print date, model, training_days, hp, system

    # the target
    target_dir = (('../data/working/%s/' % 'ege_month' if use_month else 'ege_week') +
                  ('%s/' % date) +
                  ('%s-%03d/' % (model, training_days))
                  )
    # use lin-lin as representative for all lr hyperparameters
    # use fold 0 as representative for all fold numbers
    target_file = (('%02d' % hp if model == 'rf' else '%s-%s' % ('lin', 'lin')) +
                   '-0.pickle'  # fold number
                   )
    target_path = target_dir + target_file
    lines.append('%s += %s' % (system, target_path))

    # the rule
    lines.append('%s:' % target_path)  # no dependencies, as this makefile is run mannually

    # the recipe
    options = ((' %s' % date) +
               (' --month' if use_month else '') +
               (' --model %s' % model) +
               (' --td %d' % training_days) +
               ('' if model == 'lr' else (' --hp %s' % hp))
               )
    executable = '\t~/anaconda/bin/python ege_week.py'
    recipe = executable + options
    lines.append(recipe)

    if verbose:
        pprint(lines[len(lines) - 3: len(lines)])
    lines.append(' ')


def make_hps(model, test):
    if model == 'lr':
        return (None,)
    assert model == 'rf'
    return (4,) if test else range(1, 27, 1)

# define number of cores to use on each system
if test:
    systems = ('roy', 'judith', 'hp')
else:
    # run 8 jobs on my system and 6 on judiths's and 4 on the hp
    roy = 8 * ['roy']
    judith = 6 * ['judith']
    hp = 4 * ['hp']
    systems = roy + judith + hp
    random.shuffle(systems)

# define the sale_date
dates = [datetime.date(2009, 02, 15)]
if False:
    for year in (2004, 2005, 2006, 2007, 2008):
        for month in (2, 5, 8, 11):
            dates.append(datetime.date(year, month, 15))

# create rules and recipes and targets
system_index = 0
for date in dates:
    for model in ('lr', 'rf'):
        for training_days in (7,) if test else range(7, 365, 7):
            for hp in make_hps(model, test):
                make_lines(date, model, training_days, hp, systems[system_index])
                system_index = (system_index + 1) % len(systems)

# create rules to make targets for each system
for system in set(systems):
    lines.append(' ')
    lines.append('system_%s: $(%s)' % (system, system))

f = open('ege_week.makefile', 'w')
for line in lines:
    f.write(line)
    f.write('\n')
f.close()

if __name__ == '__main__':
    if False:
        pdb.set_trace()
